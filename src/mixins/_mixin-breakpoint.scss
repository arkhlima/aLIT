// spaghetti mixin üçù

@mixin mixin-breakpoint($propMap) {
  $propMap: recursive-map-merge($propMap, $valueAbbrGlobal, $config:());

  $propName: map-get($propMap, 'propName');
  $propNameAbbr: map-get($propMap, 'propNameAbbr');

  $propValueAbbr: map-get($propMap, 'propValueAbbr');
  $propValueAbbrScale: map-get($propMap, 'propValueAbbrScale');

  $propNegative: map-get($propMap, 'propValueNegative');
  $propUnit: map-get($propMap, 'propValueUnit');

  @each $breakpointPrefix,
  $breakpointValue in $breakpoint {
    @if $breakpointValue !=null {
      @media screen and (min-width: $breakpointValue) {

        @each $x,
        $y in map-get($propMap, 'propVariant') {

          @each $xx,
          $yy in $propValueAbbrScale {

            @each $xxx,
            $yyy in map-get($propMap, isPropValue($propMap)) {
              @for $i from 0 through isLoopNegative($xx, $yyy, $propNegative) {
                .#{ $breakpointPrefix }#{ $breakpointPrefixSeparator }#{ isDashNegative($xx, $xxx, $i, $propNegative) }#{ $propNameAbbr }#{ $y }#{ $xx }#{ $xxx } {
                  @if $xx=='v'or $xx=='h' {

                    @each $xxxx,
                    $yyyy in map-get($propValueAbbrScale, $xx) {
                      #{ $propName }#{ isDashProp($xx) }#{ $xxxx }#{ isDashProp($y) }#{ $y }: #{ isDashNegative($xx, $xxx, $i, $propNegative) }#{ isValue($propMap, $yyy, $xxx, $propUnit) };
                    }
                  }

                  @else {
                    #{ $propName }#{ isDashProp($xx) }#{ $yy }#{ isDashProp($y) }#{ $y }: #{ isDashNegative($xx, $xxx, $i, $propNegative) }#{ isValue($propMap, $yyy, $xxx, $propUnit) };
                  }
                }
              }
            }
          }
        }
      }
    }

    @else {

      @each $x,
      $y in map-get($propMap, 'propVariant') {

        @each $xx,
        $yy in $propValueAbbrScale {

          @each $xxx,
          $yyy in map-get($propMap, isPropValue($propMap)) {
            @for $i from 0 through isLoopNegative($xx, $yyy, $propNegative) {
              .#{ isDashNegative($xx, $xxx, $i, $propNegative) }#{ $propNameAbbr }#{ $y }#{ $xx }#{ $xxx } {
                @if $xx=='v'or $xx=='h' {

                  @each $xxxx,
                  $yyyy in map-get($propValueAbbrScale, $xx) {
                    #{ $propName }#{ isDashProp($xx) }#{ $xxxx }#{ isDashProp($y) }#{ $y }: #{ isDashNegative($xx, $xxx, $i, $propNegative) }#{ isValue($propMap, $yyy, $xxx, $propUnit) };
                  }
                }

                @else {
                  #{ $propName }#{ isDashProp($xx) }#{ $yy }#{ isDashProp($y) }#{ $y }: #{ isDashNegative($xx, $xxx, $i, $propNegative) }#{ isValue($propMap, $yyy, $xxx, $propUnit) };
                }
              }
            }
          }
        }
      }
    }
  }

}
